///
/// @Generated by Mockolo
///



import CoreLocation
import Factory
import Foundation


class HTTPClientMock: HTTPClient {
    init() { }


    var sendRequestCallCount = 0
    var sendRequestHandler: ((Endpoint, Any) async -> (Any))?
    func sendRequest<T: Decodable>(endpoint: Endpoint, responseModel: T.Type) async -> Result<T, RequestError> {
        sendRequestCallCount += 1
        if let sendRequestHandler = sendRequestHandler {
            return await sendRequestHandler(endpoint, responseModel) as! Result<T, RequestError>
        }
        fatalError("sendRequestHandler returns can't have a default value thus its handler must be set")
    }
}

class NetworkDataLoaderMock: NetworkDataLoader {
    init() { }


    var dataCallCount = 0
    var dataHandler: ((URLRequest, (URLSessionTaskDelegate)?) async throws -> (Data, URLResponse))?
    func data(for request: URLRequest, delegate: (URLSessionTaskDelegate)?) async throws -> (Data, URLResponse) {
        dataCallCount += 1
        if let dataHandler = dataHandler {
            return try await dataHandler(request, delegate)
        }
        fatalError("dataHandler returns can't have a default value thus its handler must be set")
    }
}

class WeatherDataSourceMock: WeatherDataSource {
    init() { }


    var getCurrentWeatherCallCount = 0
    var getCurrentWeatherHandler: ((Coordinate, Units) async throws -> (CurrentWeather))?
    func getCurrentWeather(coordinate: Coordinate, units: Units) async throws -> CurrentWeather {
        getCurrentWeatherCallCount += 1
        if let getCurrentWeatherHandler = getCurrentWeatherHandler {
            return try await getCurrentWeatherHandler(coordinate, units)
        }
        fatalError("getCurrentWeatherHandler returns can't have a default value thus its handler must be set")
    }

    var getLocationsCallCount = 0
    var getLocationsHandler: ((String) async throws -> ([Location]))?
    func getLocations(query: String) async throws -> [Location] {
        getLocationsCallCount += 1
        if let getLocationsHandler = getLocationsHandler {
            return try await getLocationsHandler(query)
        }
        return [Location]()
    }
}

class WeatherRepositoryMock: WeatherRepository {
    init() { }


    var getCurrentWeatherCallCount = 0
    var getCurrentWeatherHandler: ((Coordinate, Units) async throws -> (CurrentWeather))?
    func getCurrentWeather(coordinate: Coordinate, units: Units) async throws -> CurrentWeather {
        getCurrentWeatherCallCount += 1
        if let getCurrentWeatherHandler = getCurrentWeatherHandler {
            return try await getCurrentWeatherHandler(coordinate, units)
        }
        fatalError("getCurrentWeatherHandler returns can't have a default value thus its handler must be set")
    }

    var getLocationsCallCount = 0
    var getLocationsHandler: ((String) async throws -> ([Location]))?
    func getLocations(query: String) async throws -> [Location] {
        getLocationsCallCount += 1
        if let getLocationsHandler = getLocationsHandler {
            return try await getLocationsHandler(query)
        }
        return [Location]()
    }
}

class GetLocationsUseCaseMock: GetLocationsUseCase {
    init() { }


    var executeCallCount = 0
    var executeHandler: ((String) async throws -> ([Location]))?
    func execute(query: String) async throws -> [Location] {
        executeCallCount += 1
        if let executeHandler = executeHandler {
            return try await executeHandler(query)
        }
        return [Location]()
    }
}

class LocationManagerMock: LocationManager {
    init() { }
    init(location: CLLocation? = nil, distanceFilter: CLLocationDistance, delegate: CLLocationManagerDelegate? = nil) {
        self.location = location
        self._distanceFilter = distanceFilter
        self.delegate = delegate
    }


    var locationSetCallCount = 0
    var location: CLLocation? = nil { didSet { locationSetCallCount += 1 } }

    var distanceFilterSetCallCount = 0
    private var _distanceFilter: CLLocationDistance!  { didSet { distanceFilterSetCallCount += 1 } }
    var distanceFilter: CLLocationDistance {
        get { return _distanceFilter }
        set { _distanceFilter = newValue }
    }

    var delegateSetCallCount = 0
    var delegate: CLLocationManagerDelegate? = nil { didSet { delegateSetCallCount += 1 } }

    var requestWhenInUseAuthorizationCallCount = 0
    var requestWhenInUseAuthorizationHandler: (() -> ())?
    func requestWhenInUseAuthorization()  {
        requestWhenInUseAuthorizationCallCount += 1
        if let requestWhenInUseAuthorizationHandler = requestWhenInUseAuthorizationHandler {
            requestWhenInUseAuthorizationHandler()
        }
        
    }

    var startUpdatingLocationCallCount = 0
    var startUpdatingLocationHandler: (() -> ())?
    func startUpdatingLocation()  {
        startUpdatingLocationCallCount += 1
        if let startUpdatingLocationHandler = startUpdatingLocationHandler {
            startUpdatingLocationHandler()
        }
        
    }

    var stopUpdatingLocationCallCount = 0
    var stopUpdatingLocationHandler: (() -> ())?
    func stopUpdatingLocation()  {
        stopUpdatingLocationCallCount += 1
        if let stopUpdatingLocationHandler = stopUpdatingLocationHandler {
            stopUpdatingLocationHandler()
        }
        
    }
}

class GetCurrentWeatherUseCaseMock: GetCurrentWeatherUseCase {
    init() { }


    var executeCallCount = 0
    var executeHandler: ((Coordinate, Units) async throws -> (CurrentWeather))?
    func execute(coordinate: Coordinate, units: Units) async throws -> CurrentWeather {
        executeCallCount += 1
        if let executeHandler = executeHandler {
            return try await executeHandler(coordinate, units)
        }
        fatalError("executeHandler returns can't have a default value thus its handler must be set")
    }
}

