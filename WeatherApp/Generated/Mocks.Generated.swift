///
/// @Generated by Mockolo
///



import Factory
import Foundation


class HTTPClientMock: HTTPClient {
    init() { }


    var sendRequestCallCount = 0
    var sendRequestHandler: ((Endpoint, Any) async -> (Any))?
    func sendRequest<T: Decodable>(endpoint: Endpoint, responseModel: T.Type) async -> Result<T, RequestError> {
        sendRequestCallCount += 1
        if let sendRequestHandler = sendRequestHandler {
            return await sendRequestHandler(endpoint, responseModel) as! Result<T, RequestError>
        }
        fatalError("sendRequestHandler returns can't have a default value thus its handler must be set")
    }
}

class NetworkDataLoaderMock: NetworkDataLoader {
    init() { }


    var dataCallCount = 0
    var dataHandler: ((URLRequest, (URLSessionTaskDelegate)?) async throws -> (Data, URLResponse))?
    func data(for request: URLRequest, delegate: (URLSessionTaskDelegate)?) async throws -> (Data, URLResponse) {
        dataCallCount += 1
        if let dataHandler = dataHandler {
            return try await dataHandler(request, delegate)
        }
        fatalError("dataHandler returns can't have a default value thus its handler must be set")
    }
}

class WeatherDataSourceMock: WeatherDataSource {
    init() { }


    var getCurrentWeatherCallCount = 0
    var getCurrentWeatherHandler: ((Coordinate, Units) async throws -> (CurrentWeather))?
    func getCurrentWeather(coordinate: Coordinate, units: Units) async throws -> CurrentWeather {
        getCurrentWeatherCallCount += 1
        if let getCurrentWeatherHandler = getCurrentWeatherHandler {
            return try await getCurrentWeatherHandler(coordinate, units)
        }
        fatalError("getCurrentWeatherHandler returns can't have a default value thus its handler must be set")
    }
}

class WeatherRepositoryMock: WeatherRepository {
    init() { }


    var getCurrentWeatherCallCount = 0
    var getCurrentWeatherHandler: ((Coordinate, Units) async throws -> (CurrentWeather))?
    func getCurrentWeather(coordinate: Coordinate, units: Units) async throws -> CurrentWeather {
        getCurrentWeatherCallCount += 1
        if let getCurrentWeatherHandler = getCurrentWeatherHandler {
            return try await getCurrentWeatherHandler(coordinate, units)
        }
        fatalError("getCurrentWeatherHandler returns can't have a default value thus its handler must be set")
    }
}

class GetCurrentWeatherUseCaseMock: GetCurrentWeatherUseCase {
    init() { }


    var executeCallCount = 0
    var executeHandler: ((Coordinate, Units) async throws -> (CurrentWeather))?
    func execute(coordinate: Coordinate, units: Units) async throws -> CurrentWeather {
        executeCallCount += 1
        if let executeHandler = executeHandler {
            return try await executeHandler(coordinate, units)
        }
        fatalError("executeHandler returns can't have a default value thus its handler must be set")
    }
}

